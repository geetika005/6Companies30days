//{ Driver Code Starts
//Initial Template for C++

#include <bits/stdc++.h>
using namespace std;
vector<string> AllParenthesis(int n) ;


// } Driver Code Ends
//User function Template for C++

// N is the number of pairs of parentheses
// Return list of all combinations of balanced parantheses
class Solution
{
    public:
    vector<string> AllParenthesis(int n) 
    {
        // Your code goes here 
        vector<string> ans;
        solve(n,n,"",ans);
        return ans;
    }
    void solve(int o,int c,string s,vector<string>&ans){
        if(o==0&&c==0){
           ans.push_back(s);
        return;}
        
        if(o==c){
            solve(o-1,c,s+'(',ans);
        }
        else if(o==0&&c!=0){
            for(int i=0;i<c;i++)
              s+=')';
            ans.push_back(s);
        return;   
        }
        else if(c==0&&o!=0){
        return;   
        }
        else {
            solve(o,c-1,s+')',ans);
            solve(o-1,c,s+'(',ans);
        }

        
        
        
    }
};

//{ Driver Code Starts.


int main() 
{ 
	int t;
	cin>>t;
	while(t--)
	{
		int n;
		cin>>n;
		Solution ob;
		vector<string> result = ob.AllParenthesis(n); 
		sort(result.begin(),result.end());
		for (int i = 0; i < result.size(); ++i)
			cout<<result[i]<<"\n";
	}
	return 0; 
} 

// } Driver Code Ends
